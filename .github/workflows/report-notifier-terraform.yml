name: Deploy Report Notifier Infrastructure

on:
  workflow_run:
    workflows: [ 'Report Notifier CI' ]
    types: [ completed ]
    branches:
      - develop
      - main

permissions:
  id-token: write       # Required for OIDC authentication with AWS
  contents: read        # Required to check out the repository's code
  pull-requests: write  # Required to comment on pull requests

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    env:
      ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
      AWS_REGION: us-east-1

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Terraform Working Directory and Log Message
        id: set-vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "main" ]]; then
              echo "TF_DIR=infrastructure/prod/services/report-notifier" >> $GITHUB_ENV
              echo "LOG_MESSAGE=Planning for PRODUCTION environment (Pull Request)" >> $GITHUB_ENV
            elif [[ "${{ github.base_ref }}" == "develop" ]]; then
              echo "TF_DIR=infrastructure/stage/services/report-notifier" >> $GITHUB_ENV
              echo "LOG_MESSAGE=Planning for STAGE environment (Pull Request)" >> $GITHUB_ENV
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              echo "TF_DIR=infrastructure/prod/services/report-notifier" >> $GITHUB_ENV
              echo "LOG_MESSAGE=Applying for PRODUCTION environment" >> $GITHUB_ENV
            elif [[ "${{ github.ref_name }}" == "develop" ]]; then
              echo "TF_DIR=infrastructure/stage/services/report-notifier" >> $GITHUB_ENV
              echo "LOG_MESSAGE=Applying for STAGE environment" >> $GITHUB_ENV
            fi
          fi

      - name: Log Intent
        run: echo "${{ env.LOG_MESSAGE }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.12.2

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Add Plan to PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });
            const planOutput = `## Terraform Plan for \`${process.env.TF_DIR}\`
            \`\`\`terraform\n${{ steps.plan.outputs.stdout || 'No changes.' }}\n\`\`\`
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: planOutput
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: planOutput
              });
            }

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_DIR }}
